import axios from "axios";

/* ---------------- AI Research helper ---------------- */
const aiResearch = async (query) => {
  try {
    const encodedQuery = encodeURIComponent(query);
    const url = `https://api.nekolabs.my.id/ai/ai-research?text=${encodedQuery}`;
    const { data } = await axios.get(url);
    return data.result;
  } catch (error) {
    throw new Error(
      error.response?.data?.message ||
        error.message ||
        "Gagal memanggil API ai-research"
    );
  }
};

/* ---------------- Google Translate (gratis) + Smart post-process ---------------- */
// Gunakan endpoint translate.googleapis.com (gratis, tanpa API key)
const translateWithGoogle = async (text, target = "id") => {
  try {
    const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${target}&dt=t&q=${encodeURIComponent(
      text
    )}`;
    const res = await axios.get(url, { timeout: 15000 });
    // Struktur: res.data[0] adalah array of [translatedSegment, originalSegment, ...]
    if (!res.data || !Array.isArray(res.data[0])) return null;

    // Gabungkan segmen terjemahan
    const translated = res.data[0].map((seg) => seg[0]).join("");
    return postProcessTranslation(translated);
  } catch (e) {
    return null;
  }
};

// Post-process untuk membuat terjemahan lebih "natural"
// - Perbaiki spasi/punctuation
// - Kapitalisasi awal kalimat
// - Perbaiki beberapa pola umum literal machine-translate
const postProcessTranslation = (text) => {
  if (!text) return text || "";

  // Trim awal/akhir dan normalisasi spasi
  let t = String(text).trim().replace(/\s+/g, " ");

  // Hilangkan spasi sebelum tanda baca
  t = t.replace(/\s+([,.:;!?%])/g, "$1");

  // Pastikan ada spasi setelah tanda baca kalau belum ada
  t = t.replace(/([,.;:!?])(?=[^\s])/g, "$1 ");

  // Koreksi kutipan dan spasi
  t = t.replace(/\s+"|"\s+/g, '"');

  // Ganti beberapa frasa literal yang sering muncul akibat terjemahan mentah
  const replacements = [
    [/\bAI\b/g, "AI"],
    [/\bInternet\b/g, "internet"],
    [/\bData\b/g, "data"],
    [/\bthe\b/gi, "the"], // biarkan kata the — untuk diproses manual jika perlu
    // contoh: "This is" -> "Ini adalah" (jika ada frasa Inggris pendek)
    [/\bThis is\b/gi, "Ini adalah"],
    [/\bThis has\b/gi, "Ini memiliki"],
  ];
  for (const [pat, rep] of replacements) {
    t = t.replace(pat, rep);
  }

  // Pisah menjadi kalimat berdasarkan titik, tanda tanya, seru
  const sents = t
    .split(/([.?!])\s+/)
    .reduce((acc, cur, idx, arr) => {
      // Karena split dengan capture akan menghasilkan token tanda baca
      if (cur === "." || cur === "?" || cur === "!") {
        acc[acc.length - 1] = (acc[acc.length - 1] || "") + cur;
      } else {
        acc.push(cur);
      }
      return acc;
    }, [])
    .map((s) => s && s.trim())
    .filter(Boolean);

  // Kapitalisasi setiap kalimat (awalan)
  const capped = sents
    .map((s) => {
      // Jika sudah kapital di awal, biarkan; jika tidak, kapitalisasi huruf pertama
      return s.charAt(0).toUpperCase() + s.slice(1);
    })
    .join(" ");

  // Perbaikan spasi ganda akhir
  return capped.replace(/\s{2,}/g, " ").trim();
};

const cleanRawReport = (raw) => {
  if (!raw) return "";
  const blacklistPatterns = [
    /Powered by\s+\w+/i,
    /Perplexity/gi,
    /AI Research Engine/gi,
    /Powered by AI/gi,
    /This content was generated by/gi,
    /Generated by/gi,
    /Subscribe/gi,
    /Visit.*for more/gi,
  ];

  const lines = raw.split(/\r?\n/);
  const cleaned = lines
    .map((ln) => ln.trim())
    .filter((ln) => {
      if (!ln) return false;
      for (const p of blacklistPatterns) {
        if (p.test(ln)) return false;
      }
      // Hapus baris yang hanya URL panjang terpisah atau hanya kata "PDF" saja
      if (/^https?:\/\//i.test(ln) && ln.length < 30) return false;
      if (/^pdf:?$/i.test(ln) || /^docx:?$/i.test(ln)) return false;
      return true;
    })
    .join("\n");

  // Jika hasil terlalu pendek, fallback kembalikan raw as-is (supaya tidak hilang info)
  if (cleaned.split(/\s+/).length < 5) return raw;
  return cleaned;
};

// Pecah menjadi kalimat (sederhana)
const splitIntoSentences = (text) => {
  if (!text) return [];
  const sentences = text
    .replace(/\r\n/g, " ")
    .replace(/\n/g, " ")
    .split(/(?<=[.?!])\s+(?=[A-Z0-9À-ÖØ-öø-ÿ])/g);
  if (sentences.length === 1) return text.split(/(?<=[.?!])\s+/);
  return sentences;
};

// Ringkas: ambil N kalimat pertama yang bermakna
const summarizeText = (text, maxSentences = 7) => {
  if (!text) return "";
  const s = splitIntoSentences(text)
    .filter(Boolean)
    .map((t) => t.trim());
  const picked = s.slice(0, maxSentences);
  return picked.join(" ").trim();
};

const extractUrls = (text) => {
  if (!text) return [];
  const urlRegex = /https?:\/\/[^\s)]+/g;
  const matches = text.match(urlRegex);
  return matches ? Array.from(new Set(matches)) : [];
};

const shortDomain = (url) => {
  try {
    const u = new URL(url);
    return u.hostname.replace(/^www\./, "");
  } catch (e) {
    return url;
  }
};

let handler = async (m, { conn, usedPrefix, text }) => {
  if (!text) {
    await conn.sendMessage(
      m.chat,
      {
        text: `Penggunaan:\n${usedPrefix}research <query>\n\nContoh:\n${usedPrefix}research demonstrasi di indonesia terjadi karena apa`,
      },
      { quoted: m }
    );
    return;
  }

  await conn.sendMessage(
    m.chat,
    { text: "🔎 Sedang mencari dan menyusun hasil research..." },
    { quoted: m }
  );

  try {
    const result = await aiResearch(text);

    const rawReportOriginal = result.report || result.summary || "";
    const rawQuery = result.query || text;
    const files = result.files || {};

    const linksToShow = [];
    if (files.pdf) linksToShow.push({ label: "PDF", url: files.pdf });
    if (files.docx) linksToShow.push({ label: "DOCX", url: files.docx });
    const cleanedRaw = cleanRawReport(rawReportOriginal);

    const shortEnglish =
      summarizeText(cleanedRaw, 0 ? 7 : 7) ||
      cleanedRaw ||
      "Maaf, ringkasan tidak tersedia dari sumber.";

    let translated = await translateWithGoogle(shortEnglish, "id");
    let translationNote = "";
    if (!translated) {
      translated = shortEnglish;
      translationNote =
        "\n\n⚠️ Catatan: Terjemahan otomatis tidak tersedia saat ini. Hasil ditampilkan dalam bahasa aslinya.";
    }

    const sents = splitIntoSentences(shortEnglish).filter(Boolean);
    let conclusionEnglish = "";
    if (sents.length >= 2) {
      conclusionEnglish = sents.slice(Math.max(0, sents.length - 2)).join(" ");
    } else {
      conclusionEnglish = shortEnglish;
    }
    let conclusionTranslated = await translateWithGoogle(
      conclusionEnglish,
      "id"
    );
    if (!conclusionTranslated) conclusionTranslated = conclusionEnglish;
    const blockedExtensions = [
      ".pdf",
      ".docx",
      ".zip",
      ".rar",
      ".7z",
      ".exe",
      ".pptx",
      ".xlsx",
      ".csv",
      ".json",
      ".xml",
      ".md",
    ];
    const urlsFromReport = extractUrls(rawReportOriginal);
    const extraFilesUrls = Object.values(files).filter(Boolean);
    const allUrls = Array.from(new Set([...urlsFromReport])).filter((url) => {
      return !blockedExtensions.some((ext) => url.toLowerCase().includes(ext));
    });
    const outLines = [];
    outLines.push(`📚 *Hasil Research "${text}" *`);
    outLines.push(`🔍 *Topik:* ${rawQuery}`);
    outLines.push("");
    if (linksToShow.length > 0) {
      outLines.push("📎 *File :*");
      for (const f of linksToShow) {
        outLines.push(`• ${f.label}: ${f.url}`);
      }
      outLines.push("");
    }

    outLines.push("────────────────────");
    outLines.push("*Ringkasan:*");
    outLines.push("");
    outLines.push(translated.trim());
    if (translationNote) outLines.push(translationNote);
    outLines.push("");

    outLines.push("*Kesimpulan:*");
    outLines.push(conclusionTranslated.trim());
    outLines.push("");

    if (allUrls.length > 0) {
      outLines.push("🔗 *Sumber & Referensi:*");
      const showUrls = allUrls.slice(0, 12); 
      for (const u of showUrls) {
        outLines.push(`• ${shortDomain(u)} — ${u}`);
      }
      if (allUrls.length > showUrls.length) {
        outLines.push(
          `• ...dan ${allUrls.length - showUrls.length} sumber lainnya`
        );
      }
    } else {
      outLines.push(
        "🔗 *Sumber:* (tidak ada URL eksplisit terdeteksi dalam laporan)"
      );
    }

    outLines.push("");
    outLines.push("© Powered by GPT, Perplexity, Gemini & some article public");

    const caption = outLines.join("\n");

    await conn.sendMessage(m.chat, { text: caption }, { quoted: m });
  } catch (e) {
    await conn.sendMessage(
      m.chat,
      {
        text:
          "❌ " + (e.message || "Terjadi kesalahan saat memproses permintaan."),
      },
      { quoted: m }
    );
  }
};

handler.help = ["research <query>"];
handler.tags = ["tools"];
handler.command = /^research$/i;

export default handler;
